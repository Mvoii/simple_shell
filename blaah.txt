1. first check if the args is exit or ctrl + D or ctrl + C
    - if it is then exit
    -if not then got to step 2
2. Check for wildcards
    - if there are, call the function to deal with it
    - if not then go to step 3
3. parse the args and check for any piping or redirection
    - if there are redirection and piping characters then call upon ther respective functions
    - if an executable the execute
    - if it is a shell variable then call a function to execute it
    - if it is neither then display an error and ask user to input a command

usable in interactive mode and non-interactive mode
cd 
clear
exit

built-in commands
- exit
- env


ctrl + D - exit shell
accepts arguments for funstions
checks the path for executables

shell implimentation
- Parser
- Executor
- shell subsystems

A shell is a command-line interface (CLI) program that interprets user commands and executes them. Here's a general overview of how a shell works:

    Display Prompt: When you open a shell, it displays a prompt, typically indicating the current working directory or some other information, such as the username, hostname, or time.

    Read Input: The shell waits for user input. Users type commands, which are typically strings of text, and press Enter to submit them.

    Parse Input: After the user presses Enter, the shell reads the input and parses it into a format that it can understand. This often involves breaking the input into tokens (words or symbols) and identifying the command and its arguments.

    Execute Command: Once the input is parsed, the shell determines the command to execute and launches a process to execute it. This process may involve searching for the command executable in the system's executable paths.

    Create Child Process: The shell typically creates a child process using system calls like fork() or exec() to execute the command. The child process runs the specified command while the parent shell process continues to wait for user input.

    Command Execution: The child process executes the command by loading the specified program binary into memory and running it with the provided arguments. The command may perform various tasks, such as manipulating files, interacting with the system, or running other programs.

    Wait for Completion: After launching the command, the parent shell process waits for the child process to complete its execution. This ensures that the shell remains responsive and can handle additional user input.

    Output Handling: The shell may capture and display the output generated by the command execution. This output may include text printed to the standard output (stdout) or standard error (stderr) streams.

    Prompt Again: Once the command execution is complete, the shell displays a new prompt, indicating that it's ready to accept another command from the user. The process then repeats, allowing users to enter and execute additional commands.